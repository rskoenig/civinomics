<%namespace name="lib_6" file="/lib/6_lib.mako" />
<%namespace name="helpers" file="/lib/template_lib.mako" />
<%! import pylowiki.lib.db.user as userLib %>
<% lib_6.validateSession() %>
<!DOCTYPE HTML>
<html lang="en-US" ng-app='civ'>
   <head>
      <meta charset="UTF-8">
      <title>${c.title}</title>
      <!-- Third-party assets -->
      <link rel="stylesheet" href="/styles/vendor/bootstrap.css">
      <link rel="stylesheet" href="/styles/vendor/bootstrap-responsive.min.css">
      <link rel="stylesheet" href="${lib_6.fingerprintFile('/styles/civ.css')}">
      <link rel="shortcut icon" href="${lib_6.fingerprintFile('/images/logo_tab.ico')}">
      <link href='//fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
      <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.0.5/angular.min.js"></script>
      <script>
        var dummyApp = angular.module('civ', []);
      </script>
      <script src="/js/extauth.js" type="text/javascript"></script>
      ${self.extraStyles()}
      ${self.headScripts()}
      ${self.headScripts2()}
      ${self.google_analytics()}
      <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
      <!--[if lt IE 9]>
         <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
      <![endif]-->
   </head>
   <body ${self.bodyTag_extras()}>

         ##
         ## uses the appropriate navbar, container and footer depending on the page
         ##

         % if session._environ['PATH_INFO'] in ("/", "/signup", "/login", "/forgotPassword") or "activate" in session._environ['PATH_INFO']:
            <div id="wrap">
               ${helpers.splashNavbar()}
               <div>
                  ${next.body()}
               </div>
            </div><!-- close wrap -->
            % if session._environ['PATH_INFO'] == ("/"):
               ${helpers.tallFooter()}
            % endif

         % elif "corp" in session._environ['PATH_INFO']:
            <div id="wrap">
               ${helpers.mainNavbar()}
               <div class="container main">
                  ${next.body()}
               </div>
            </div><!-- close wrap -->
            ${helpers.copyright()}

         % else:
            <div id="wrap">
               ${helpers.mainNavbar()}
               <div class="container main">
                  ${next.body()}
               </div>
            </div><!-- close wrap -->
            ${helpers.shortFooter()}

         % endif

   </div>

   <!-- scripts go at the bottom so they don't keep the user waiting -->
   <script type="text/javascript" src="/js/vendor/bootstrap.min.js"></script>
   <script type="text/javascript" src="${lib_6.fingerprintFile('/js/searchBox.js')}"></script>
   ${self.extraScripts()}
   ${self.extraScripts2()}
   ${self.atlassian_issueCollector()}
   <div id="fb-root"></div>
   % if 'user' not in session:
       <script>
       //$('#fbLogin').on('click', function (e) {

         window.fbAsyncInit = function() {
            FB.init({
              appId      : '133971610029022', // App ID
              channelUrl : '//todd.civinomics.org/cross/channel.html', // Channel File
              status     : true, // check login status
              cookie     : false, // enable cookies to allow the server to access the session
              xfbml      : true  // parse XFBML
            });

            // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
            // for any authentication related change, such as login, logout or session refresh. This means that
            // whenever someone who was previously logged out tries to log in again, the correct case below 
            // will be handled. 
            console.log('window init');
            FB.Event.subscribe('auth.login', function(response1) {
              console.log('auth.login fired');
              authSignal();
            });
            FB.Event.subscribe('auth.authResponseChange', function(response) {
              // Here we specify what we do with the response anytime this event occurs. 
              
              console.log('above response tree');
              if (response.status === 'connected') {
                //  We're given the token and other info - good for makig calls to fb
                // locally, we've found that this person is logged into fb, and has given us 
                // permission to work with this auth.
                //  In order to preserve a standard login/signup experience, we will save this 
                // info in the user's session, including a stamp (if necessary) confirming this
                // person is auth'd for an fb-backed login.
                // * store the auth token and exp time in this person's session
                // * change the fb button into a button that will ask the server to 'log in'
                // by confirming it's ok with fb
                //console.log('token: ' + response.authResponse.accessToken);
                // we can use fb to login to the site. at this point store the token and exp
                console.log('calling fb connected');
                fbConnected(response.authResponse);
              } else if (response.status === 'not_authorized') {
                // In this case, the person is logged into Facebook, but not into the app, so we call
                // FB.login() to prompt them to do so. 
                // In real-life usage, you wouldn't want to immediately prompt someone to login 
                // like this, for two reasons:
                // (1) JavaScript created popup windows are blocked by most browsers unless they 
                // result from direct interaction from people using the app (such as a mouse click)
                // (2) it is a bad experience to be continually prompted to login upon page load.
                console.log('not authd');                
                FB.login();
                
                //FB.login(function(response) {
                  // handle the response
                //}, {scope: 'name, email, user_location, user_hometown'});
              } else {
                // In this case, the person is not logged into Facebook, so we call the login() 
                // function to prompt them to do so. Note that at this stage there is no indication
                // of whether they are logged into the app. If they aren't then they'll see the Login
                // dialog right after they log in to Facebook. 
                // The same caveats as above apply to the FB.login() call here.
                console.log('else');
                FB.login();
                
                //FB.login(function(response) {
                  // handle the response
                //}, {scope: 'name, email, user_location, user_hometown'});
              }
            });
         };

         // Load the SDK asynchronously
         (function(d){
          var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
          if (d.getElementById(id)) {return;}
          js = d.createElement('script'); js.id = id; js.async = true;
          js.src = "//connect.facebook.net/en_US/all.js";
          ref.parentNode.insertBefore(js, ref);
         }(document));

         // Here we run a very simple test of the Graph API after login is successful. 
         // This testAPI() function is only called in those cases. 
         function testAPI() {
           console.log('Welcome!  Fetching your information.... ');
           FB.api('/me', function(response) {
             console.log('name: ' + response.name + '.email: ' + response.email + '.username: ' + response.username + '.user_location' + response.user_location + '.user_hometown' +  response.user_hometown + '.');
           });
         }

         function authSignal() {
           console.log('in auth signal')
           var authSignal = '<div id="authSignal"></div>'
           $('#fbLoginButton').append(authSignal);
         }

         function fbConnected(authResponse) {
           FB.api('/me', function(response) {
             // the FQL query: Get the link of the image, that is the first in the album "Profile pictures" of this user.

             //var bigPicFql = FB.Data.query('select src_big from photo where pid in (select cover_pid from album where owner={0} and name="Profile Pictures")', response.id);
             var bigPicFql = FB.Data.query('SELECT url FROM profile_pic WHERE id = {0} AND width=160 AND height=160', response.id);
             var bigPic = '';
             bigPicFql.wait(function (rows) {
               // the big pic link
               bigPic = rows[0].src_big;
               console.log('big pic: ' + bigPic)
             });
             var smallPicFql = FB.Data.query('SELECT url FROM profile_pic WHERE id = {0}', response.id);
             var smallPic = '';
             var holder = 0;
             smallPicFql.wait(function (rows) {
               //the small pic link
               smallPic = rows[0].url;
               holder = 1;
             });
             var result = ''
             setTimeout(function(){
               // fbCheckAccount will verify a spoof is not happening then determine if there's
               // a matching account on site yet. if so, result will contain html for visiting a 
               // page that will log this user in.
               result = fbCheckAccount(response, authResponse, smallPic, bigPic);
               if (result == "not found") {
                 // no account on site yet.
                 // this is a unique situation where the person has authorized us to use their
                 // fb identity, but hasn't created an account yet. This assumes that's what they
                 // want to do and redirects once this situation is recognized.
                 if ($('#fbSignUp').length) {
                   console.log('facebook signup')
                 } else {
                   window.location = '/signup/fbSignUp/';
                 }
               } else {
                 if ($('#authSignal').length) {
                   // this triggers when a person has arrived but was not yet logged inot facebook or
                   // had not yet given auth to our app
                   var newLiButton = '<li class="nav-item">Logging In</li>';
                   var newButton = 'Logging In'
                   $('#fbLoginButton').html(newLiButton);
                   $('#fbLoginButton1').html(newButton);
                   $('#fbLoginButton2').html(newButton);
                   window.location = '/fbLoggingIn/';
                 }
                 else if ($('#fbLoggingIn').length) {
                   // this element is only found on a page meant to be used as a redirect when
                   // the 'login with facebook' link has been clicked.
                   window.location = '/fbLoggingIn/';
                 } else {
                   // this code is used when a person arrives and it is seen that they have 
                   // auth'd our app and are logged into facebook 
                   // replace current button with returned result
                   var newLiButton = '<li class="nav-item"><a href="/fbLogin"><img src="/images/fb_connect.png" class="small-logo"></a></li>';
                   var newButton = '<a href="/fbLogin"><img src="/images/fb_connect.png" class="small-logo"></a>'
                   $('#fbLoginButton').html(newLiButton);
                   $('#fbLoginButton1').html(newButton);
                   $('#fbLoginButton2').html(newButton);
                 }
               }
             },1000);
           });
         }
       //})
       </script>
   % endif  ## if 'user' in session
   </body>
</html>

<%def name="bodyTag_extras()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="extraStyles()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="headScripts()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="headScripts2()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="extraScripts()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="extraScripts2()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="google_analytics()">
   % if c.conf['google.analytics']:
      <script type="text/javascript">
         var _gaq = _gaq || [];
         _gaq.push(['_setAccount', "${c.conf['google.analytics']}"]);
         _gaq.push(['_trackPageview']);
         
         (function() {
         var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
         ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
         var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
         })();
      </script>
   % endif
</%def>

<%def name="atlassian_issueCollector()">
   <script type="text/javascript" src="https://civinomics.atlassian.net/s/en_US-pdztjm-418945332/6030/29/1.3.4/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector.js?collectorId=610d78ad"></script>

   <script type="text/javascript">window.ATL_JQ_PAGE_PROPS =  {
    "triggerFunction": function(showCollectorDialog) {
      $("#footerFeedbackButton").on( 'click', function(e) {
        e.preventDefault();
        showCollectorDialog();
      });
      $("#helpCenter_bugReporter").on( 'click', function(e) {
        e.preventDefault();
        showCollectorDialog();
      });
    }};</script>
</%def>