<%namespace name="lib_6" file="/lib/6_lib.mako" />
<%namespace name="template_lib" file="/lib/template_lib.mako" />

<%! import pylowiki.lib.db.user as userLib %>
<% lib_6.validateSession() %>
<!DOCTYPE HTML>
<html lang="en-US" ng-app='civ'>
   <head>
      <meta charset="UTF8">
      <meta name="description" content="Civinomics is an online citizen collaboration platform. You can use Civinomics to join the movement towards improving social decision-making through the collective creativity of communities.">
      <title>${c.title}</title>
      <!-- Third-party assets -->
      <link rel="stylesheet" href="/styles/vendor/bootstrap.css">
      <link rel="stylesheet" href="/styles/vendor/bootstrap-responsive.min.css">
      <link rel="stylesheet" href="/styles/vendor/font-awesome/css/font-awesome.min.css">
      <link rel="stylesheet" href="${lib_6.fingerprintFile('/styles/civ.css')}">
      <link rel="shortcut icon" href="${lib_6.fingerprintFile('/images/logo_tab.ico')}">
      <link href='//fonts.googleapis.com/css?family=Roboto:500,400,300,100,400italic,300italic,700' rel='stylesheet' type='text/css'>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
      <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.min.js"></script>
      <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular-sanitize.js"></script>
      <script src="${lib_6.fingerprintFile('/js/vendor/ui-bootstrap-tpls-0.10.0.min.js')}"></script>
      <script type="text/javascript" src="${lib_6.fingerprintFile('/js/vendor/binaryMuse_ngInfiniteScroll.min.js')}"></script>
      <script type="text/javascript" src="${lib_6.fingerprintFile('/js/geoSearch.js')}"></script>
      <script type="text/javascript" src="${lib_6.fingerprintFile('/js/ng/signup_login.js')}"></script>
      <script type="text/javascript" src="${lib_6.fingerprintFile('/js/ng/comments.js')}"></script>
      <script>
        var dummyApp = angular.module('civ', ['ngSanitize', 'infinite-scroll', 'ui.bootstrap']);
      </script>
      <script src="/js/extauth.js" type="text/javascript"></script>
      ${self.extraStyles()}
      ${self.headScripts()}
      ${self.headScripts2()}
      ${self.google_analytics()}
      <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
      <!--[if lt IE 9]>
         <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
      <![endif]-->      
   </head>
   <body ${self.bodyTag_extras()}>
    <p>t1</p>
    ${next.body()}
    <p id="ta"></p>
    <p id="t0"></p>
    <p id="t1"></p>
    <p id="t2"></p>
    <p id="t3"></p>
    <p id="t4"></p>
    <p id="t5"></p>
   
   <script type="text/javascript" src="/js/vendor/bootstrap.min.js"></script>
   <script type="text/javascript" src="${lib_6.fingerprintFile('/js/searchBox.js')}"></script>
   <script type="text/javascript" src="/js/vendor/jquery.autosize.js"></script>
   <script type="text/javascript">
    // fix for bootstrap dropdown menus not working on iPad
    $('body').on('touchstart.dropdown', '.dropdown-menu', function (e) { e.stopPropagation(); });
   </script>
   <script>
      $(document).ready(function(){
        $('textarea').autosize();   
      });
   </script>
   <!-- makes non-local links open in a new tab/window -->
   <script type="text/javascript">
      $(document.links).filter(function() {
          return this.hostname != window.location.hostname;
      }).attr('target', '_blank');
   </script>

   <!-- Javascript to enable link to tab -->
   <script type="text/javascript">
      $(function () { 
        var a = $('[href=' + location.hash + ']'); 
        a && a.tab('show'); 
      });
    </script>


   ${self.extraScripts()}
   ${self.extraScripts2()}
   ${self.atlassian_issueCollector()}
   % if 'user' not in session:
      <script type="text/javascript" src="/js/vendor/async.min.js"></script>
      <%
          facebookAppId = c.facebookAppId
          channelUrl = c.channelUrl
      %>
      <div id="fb-root"></div>
      <script>
        //console.log('in fb init')
        function fbLogin() {
            FB.login(function(response) {
                if (response.authResponse) {
                    console.log('Welcome!  Fetching your information.... ');
                    console.log("response status: " + response.status)
                    console.log("response email: " + response.email)
                    fbConnected(response);
                } else {
                    console.log('User cancelled login or did not fully authorize.');
                }
            }, {scope: 'public_profile,email'});
        }
        // This is called with the results from from FB.getLoginStatus().
        function statusChangeCallback(response) {
            console.log('statusChangeCallback');
            console.log(response);
            // The response object is returned with a status field that lets the
            // app know the current login status of the person.
            // Full docs on the response object can be found in the documentation
            // for FB.getLoginStatus().
            if (response.status === 'connected') {
                // Logged into your app and Facebook.
                console.log('connected');
                fbConnected(response);
            } else if (response.status === 'not_authorized') {
                // The person is logged into Facebook, but not your app.
                console.log('notAuthed');
                fbLogin();
            } else {
                // The person is not logged into Facebook, so we're not sure if 
                // they are logged into this app or not.
                console.log('not logged into fb');
                fbLogin();
            }
        }

        // This function is called when someone finishes with the Login
        // Button.  See the onlogin handler attached to it in the sample
        // code below.
        function checkLoginState() {
            FB.getLoginStatus(function(response) {
                statusChangeCallback(response);
            });
        }

        function authSignal() {
          console.log('auth sig');
          var authSignal = '<div id="authSignal"></div>';
          $('#fbLoginButton1').append(authSignal);
          $('#fbLoginButton2').append(authSignal);
        }

        var login_event = function(response) {
            console.log("login_event");
            console.log(response.status);
            console.log(response);
            authSignal();
        }
        var logout_event = function(response) {
            console.log("logout_event");
            console.log(response.status);
            console.log(response);
        }

        // activate facebook javascript sdk
        window.fbAsyncInit = function() {
            FB.init({
                appId      : "${facebookAppId}",
                status     : true,
                cookie     : true,  // enable cookies to allow the server to access the session
                xfbml      : true,  // parse social plugins on this page
                version    : 'v2.0' // use version 2.0
            });
            // getLoginStatus: gets the state of the person visiting this page
            // RETURNS: 
            // 1. Logged into our app ('connected')
            // 2. Logged into Facebook, but not our app ('not_authorized')
            // 3. Not logged into Facebook and can't tell if they are logged into our app or not.
            // In your onload method:
            FB.Event.subscribe('auth.login', login_event);
            FB.Event.subscribe('auth.logout', logout_event);

            FB.Event.subscribe('auth.authResponseChange', function(response) {
                statusChangeCallback(response);
            });

        };
        
        // Load the SDK asynchronously
        (function(d, s, id) {
          var js, fjs = d.getElementsByTagName(s)[0];
          if (d.getElementById(id)) return;
          js = d.createElement(s); js.id = id;
          js.src = "//connect.facebook.net/en_US/sdk.js";
          fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));

        // Here we run a very simple test of the Graph API after login is
        // successful.  See statusChangeCallback() for when this call is made.
        function testAPI() {
          console.log('Welcome!  Fetching your information.... ');
          FB.api('/me', function(response) {
            console.log('Good to see you, ' + response.name + '.');
            document.getElementById('status').innerHTML = 'Good to see you, ' +
              response.name;
          });
        }

        
        function printObject(o) {
          var out = '';
          for (var p in o) {
            out += p + ': ' + o[p] + '\n';
          }
          console.log(out);
        }
        

        function fbConnected(response) {
            //console.log('a');
            //FB.api('/me', function(response) {
            console.log('b');
            var bigPic = '';
            var bigPicFql = '';
            var smallPic = '';
            var smallPicFql = '';
            var result = '';
            
            async.series([
                function(callback) {
                    console.log('c');
                    //FB.api('/me', {fields: 'profile_pic'}, function(response) {
                    //    console.log('c. '+printObject(response));
                    //});
                    /*
                    FB.login(function(){
                        FB.api('/me/feed', 'post', {message: 'Hello, fbland!'});
                    }, {scope: 'publish_actions'});

                    bigPicFql = FB.Data.query('SELECT url FROM profile_pic WHERE id = {0} AND width=200 AND height=200', response.id);
                    bigPicFql.wait(function (rows) {
                        // the big pic link
                        bigPic = rows[0].url;
                        console.log('bp: '+bigPic);
                        callback();
                    });*/
                    callback();
                },
                function(callback) {
                    console.log('d');
                    //FB.api('/me', {fields: 'profile_pic'}, function(response) {
                    //    console.log('d. '+printObject(response));
                    //});
                    /*smallPicFql = FB.Data.query('SELECT url FROM profile_pic WHERE id = {0}', response.id);
                    smallPicFql.wait(function (rows) {
                        // the big pic link
                        console.log(rows);
                        smallPic = rows[0].url;
                        console.log('sp: '+smallPic);
                        callback();
                    });*/
                    callback();
                },
                function(callback) {
                    // perform fbauthcheck now that the pic urls have been loaded
                    console.log('e');
                    callFbCheckAccount(response, response.authResponse, smallPic, bigPic, function(err, checkResult) {
                        if (err) return callback(err);
                        result = checkResult;
                        callback();
                    });
                }
            ], function(err) {
                //check on the result of fbCheckAccount
                console.log('result: '+result);
                if (err) return next(err);
                if (result == "not found") {
                    // no account on site yet.
                    // this is a unique situation where the person has authorized us to use their
                    // fb identity, but hasn't created an account yet. This assumes that's what they
                    // want to do and redirects once this situation is recognized.
                    if ($('#fbSignUp').length) {
                        console.log('facebook signup')
                    } else {
                        window.location = '/signup/fbSignUp/';
                    }
                } else {
                    // found a matching account on our site
                    if ($('#authSignal').length) {
                        console.log('1');
                        // this triggers when a person has arrived but was not yet logged into facebook,
                        // or had not yet given auth to our app
                        var newButton = 'Logging In'
                        $('#fbLoginButton1').html(newButton);
                        $('#fbLoginButton2').html(newButton);
                        window.location = '/fbLoggingIn/';
                    } else if ($('#fbLoggingIn').length) {
                        console.log('2');
                        // this element is only found on a page meant to be used as a redirect when
                        // the 'login with facebook' link has been clicked.
                        window.location = '/fbLoggingIn/';
                    } else {
                        console.log('3');
                        // this code is used when a person arrives and it is seen that they have 
                        // auth'd our app and are logged into facebook 
                        // replace current button with returned result
                        var newButton = '<a href="/fbLogin"><img src="/images/f-login.png"></a>'
                        $('#fbLoginButton1').html(newButton);
                        $('#fbLoginButton2').html(newButton);
                    }
                }
            });
            //});
        }

        function getThePic(thePicFql, callback) {
            console.log('!');
            var thePic = '';
            // grab the url to a 200x200 photo of this user
            thePicFql.wait(function (rows) {
              // the big pic link
              thePic = rows[0].url;
            });
            callback(null, thePic);
        }

        function callFbCheckAccount(response, authResponse, smallPic, bigPic, callback) {
            result = '';
            // now that we have small and big pics, call fbCheckAccount
            result = fbCheckAccount(response, authResponse, smallPic, bigPic);            
            callback(null, result);
        }
      </script>
   % endif  ## if 'user' in session
   </body>
</html>

<%def name="bodyTag_extras()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="extraStyles()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="headScripts()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="headScripts2()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="extraScripts()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="extraScripts2()">
   ## do nothing by default.  Overwritten if the function is defined
   ## in a child template
</%def>

<%def name="google_analytics()">
   % if c.conf['google.analytics']:
      <script type="text/javascript">
         var _gaq = _gaq || [];
         _gaq.push(['_setAccount', "${c.conf['google.analytics']}"]);
         _gaq.push(['_trackPageview']);
         
         (function() {
         var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
         ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
         var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
         })();
      </script>
   % endif
</%def>

<%def name="atlassian_issueCollector()">
   <script type="text/javascript" src="https://civinomics.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e/en_US523t43-1988229788/6206/29/1.4.1/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector.js?collectorId=cd6cc7a9"></script>


   <script type="text/javascript">window.ATL_JQ_PAGE_PROPS =  {
    "triggerFunction": function(showCollectorDialog) {
      $("#footerFeedbackButton").on( 'click', function(e) {
          e.preventDefault();
          showCollectorDialog();
        });
        $("#helpCenter_bugReporter").on( 'click', function(e) {
          e.preventDefault();
          showCollectorDialog();
        });
      }};</script>
</%def>